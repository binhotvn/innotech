# For demo only, this is a BAD practice to use in production
version: '3.8'

services:
  # MongoDB Replica Set Members
  mongo1:
    image: mongo:7.0
    container_name: mongo1
    command: ['--replSet', 'rs0', '--bind_ip_all', '--port', '27017']
    ports:
    - 2000:27017
    networks:
      - mongo-network
    restart: always
    healthcheck:
      test: >
        echo "try { rs.status() } catch (err) { rs.initiate({
          _id:'rs0',
          members:[
            {_id:0,host:'mongo1:27017',priority:1},
            {_id:1,host:'mongo2:27017',priority:0.5},
            {_id:2,host:'mongo3:27017',priority:0.5},
          ]
        }); rs.secondaryOk(); }" | mongosh --port 27017 --quiet
      interval: 10s
      timeout: 20s
      retries: 10
    volumes:
      - './mongodb_data/mongo1/data:/data/db'
      - './mongodb_data/mongo1/configdb:/data/configdb'

  mongo2:
    image: mongo:7.0
    container_name: mongo2
    command: ['--replSet', 'rs0', '--bind_ip_all', '--port', '27017']
  ports:
      - 2001:27017
    networks:
      - mongo-network
    restart: always
    volumes:
      - './mongodb_data/mongo2/data:/data/db'
      - './mongodb_data/mongo2/configdb:/data/configdb'

  mongo3:
    image: mongo:7.0
    container_name: mongo3
    command: ['--replSet', 'rs0', '--bind_ip_all', '--port', '27017']
    ports:
      - 2002:27017
    networks:
      - mongo-network
    restart: always
    volumes:
      - './mongodb_data/mongo3/data:/data/db'
      - './mongodb_data/mongo3/configdb:/data/configdb'

  # Redis Service
  redis:
    image: redis:7.0-alpine
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]  
    networks:
      - mongo-network
    restart: unless-stopped
    volumes:
      - './redis_data:/data'
    


networks:
  mongo-network:
    driver: bridge